/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package rheeluke.streams.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Tweet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6018035173368374158L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tweet\",\"namespace\":\"rheeluke.streams.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"created_at\",\"type\":\"string\"},{\"name\":\"user\",\"type\":{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"screen_name\",\"type\":\"string\"},{\"name\":\"location\",\"type\":[\"null\",\"string\"]},{\"name\":\"verified\",\"type\":\"boolean\"},{\"name\":\"friends_count\",\"type\":\"int\"},{\"name\":\"followers_count\",\"type\":\"int\"},{\"name\":\"statuses_count\",\"type\":\"int\"}],\"connect.name\":\"rheeluke.streams.avro.User\"}},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"is_retweet\",\"type\":\"boolean\"},{\"name\":\"entities\",\"type\":{\"type\":\"record\",\"name\":\"Entities\",\"fields\":[{\"name\":\"hashtags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Hashtag\",\"fields\":[{\"name\":\"text\",\"type\":\"string\"}],\"connect.name\":\"rheeluke.streams.avro.Hashtag\"}}]},{\"name\":\"media\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Medium\",\"fields\":[{\"name\":\"display_url\",\"type\":\"string\"},{\"name\":\"expanded_url\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"connect.name\":\"rheeluke.streams.avro.Medium\"}}]},{\"name\":\"urls\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Url\",\"fields\":[{\"name\":\"display_url\",\"type\":\"string\"},{\"name\":\"expanded_url\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"connect.name\":\"rheeluke.streams.avro.Url\"}}]},{\"name\":\"user_mentions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UserMention\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"screen_name\",\"type\":\"string\"}],\"connect.name\":\"rheeluke.streams.avro.UserMention\"}}]}],\"connect.name\":\"rheeluke.streams.avro.Entities\"}}],\"connect.name\":\"rheeluke.streams.avro.Tweet\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence created_at;
  @Deprecated public rheeluke.streams.avro.User user;
  @Deprecated public java.lang.CharSequence text;
  @Deprecated public boolean is_retweet;
  @Deprecated public rheeluke.streams.avro.Entities entities;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Tweet() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param created_at The new value for created_at
   * @param user The new value for user
   * @param text The new value for text
   * @param is_retweet The new value for is_retweet
   * @param entities The new value for entities
   */
  public Tweet(java.lang.Long id, java.lang.CharSequence created_at, rheeluke.streams.avro.User user, java.lang.CharSequence text, java.lang.Boolean is_retweet, rheeluke.streams.avro.Entities entities) {
    this.id = id;
    this.created_at = created_at;
    this.user = user;
    this.text = text;
    this.is_retweet = is_retweet;
    this.entities = entities;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return created_at;
    case 2: return user;
    case 3: return text;
    case 4: return is_retweet;
    case 5: return entities;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: created_at = (java.lang.CharSequence)value$; break;
    case 2: user = (rheeluke.streams.avro.User)value$; break;
    case 3: text = (java.lang.CharSequence)value$; break;
    case 4: is_retweet = (java.lang.Boolean)value$; break;
    case 5: entities = (rheeluke.streams.avro.Entities)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'created_at' field.
   * @return The value of the 'created_at' field.
   */
  public java.lang.CharSequence getCreatedAt() {
    return created_at;
  }

  /**
   * Sets the value of the 'created_at' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.CharSequence value) {
    this.created_at = value;
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public rheeluke.streams.avro.User getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(rheeluke.streams.avro.User value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.CharSequence getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'is_retweet' field.
   * @return The value of the 'is_retweet' field.
   */
  public java.lang.Boolean getIsRetweet() {
    return is_retweet;
  }

  /**
   * Sets the value of the 'is_retweet' field.
   * @param value the value to set.
   */
  public void setIsRetweet(java.lang.Boolean value) {
    this.is_retweet = value;
  }

  /**
   * Gets the value of the 'entities' field.
   * @return The value of the 'entities' field.
   */
  public rheeluke.streams.avro.Entities getEntities() {
    return entities;
  }

  /**
   * Sets the value of the 'entities' field.
   * @param value the value to set.
   */
  public void setEntities(rheeluke.streams.avro.Entities value) {
    this.entities = value;
  }

  /**
   * Creates a new Tweet RecordBuilder.
   * @return A new Tweet RecordBuilder
   */
  public static rheeluke.streams.avro.Tweet.Builder newBuilder() {
    return new rheeluke.streams.avro.Tweet.Builder();
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Tweet RecordBuilder
   */
  public static rheeluke.streams.avro.Tweet.Builder newBuilder(rheeluke.streams.avro.Tweet.Builder other) {
    return new rheeluke.streams.avro.Tweet.Builder(other);
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Tweet instance.
   * @param other The existing instance to copy.
   * @return A new Tweet RecordBuilder
   */
  public static rheeluke.streams.avro.Tweet.Builder newBuilder(rheeluke.streams.avro.Tweet other) {
    return new rheeluke.streams.avro.Tweet.Builder(other);
  }

  /**
   * RecordBuilder for Tweet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tweet>
    implements org.apache.avro.data.RecordBuilder<Tweet> {

    private long id;
    private java.lang.CharSequence created_at;
    private rheeluke.streams.avro.User user;
    private rheeluke.streams.avro.User.Builder userBuilder;
    private java.lang.CharSequence text;
    private boolean is_retweet;
    private rheeluke.streams.avro.Entities entities;
    private rheeluke.streams.avro.Entities.Builder entitiesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(rheeluke.streams.avro.Tweet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.created_at)) {
        this.created_at = data().deepCopy(fields()[1].schema(), other.created_at);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      if (other.hasUserBuilder()) {
        this.userBuilder = rheeluke.streams.avro.User.newBuilder(other.getUserBuilder());
      }
      if (isValidValue(fields()[3], other.text)) {
        this.text = data().deepCopy(fields()[3].schema(), other.text);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.is_retweet)) {
        this.is_retweet = data().deepCopy(fields()[4].schema(), other.is_retweet);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.entities)) {
        this.entities = data().deepCopy(fields()[5].schema(), other.entities);
        fieldSetFlags()[5] = true;
      }
      if (other.hasEntitiesBuilder()) {
        this.entitiesBuilder = rheeluke.streams.avro.Entities.newBuilder(other.getEntitiesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Tweet instance
     * @param other The existing instance to copy.
     */
    private Builder(rheeluke.streams.avro.Tweet other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.created_at)) {
        this.created_at = data().deepCopy(fields()[1].schema(), other.created_at);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      this.userBuilder = null;
      if (isValidValue(fields()[3], other.text)) {
        this.text = data().deepCopy(fields()[3].schema(), other.text);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.is_retweet)) {
        this.is_retweet = data().deepCopy(fields()[4].schema(), other.is_retweet);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.entities)) {
        this.entities = data().deepCopy(fields()[5].schema(), other.entities);
        fieldSetFlags()[5] = true;
      }
      this.entitiesBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_at' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreatedAt() {
      return created_at;
    }

    /**
      * Sets the value of the 'created_at' field.
      * @param value The value of 'created_at'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder setCreatedAt(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.created_at = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'created_at' field has been set.
      * @return True if the 'created_at' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'created_at' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder clearCreatedAt() {
      created_at = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public rheeluke.streams.avro.User getUser() {
      return user;
    }

    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder setUser(rheeluke.streams.avro.User value) {
      validate(fields()[2], value);
      this.userBuilder = null;
      this.user = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'user' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public rheeluke.streams.avro.User.Builder getUserBuilder() {
      if (userBuilder == null) {
        if (hasUser()) {
          setUserBuilder(rheeluke.streams.avro.User.newBuilder(user));
        } else {
          setUserBuilder(rheeluke.streams.avro.User.newBuilder());
        }
      }
      return userBuilder;
    }

    /**
     * Sets the Builder instance for the 'user' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public rheeluke.streams.avro.Tweet.Builder setUserBuilder(rheeluke.streams.avro.User.Builder value) {
      clearUser();
      userBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'user' field has an active Builder instance
     * @return True if the 'user' field has an active Builder instance
     */
    public boolean hasUserBuilder() {
      return userBuilder != null;
    }

    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder clearUser() {
      user = null;
      userBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.CharSequence getText() {
      return text;
    }

    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder setText(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.text = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder clearText() {
      text = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'is_retweet' field.
      * @return The value.
      */
    public java.lang.Boolean getIsRetweet() {
      return is_retweet;
    }

    /**
      * Sets the value of the 'is_retweet' field.
      * @param value The value of 'is_retweet'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder setIsRetweet(boolean value) {
      validate(fields()[4], value);
      this.is_retweet = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'is_retweet' field has been set.
      * @return True if the 'is_retweet' field has been set, false otherwise.
      */
    public boolean hasIsRetweet() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'is_retweet' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder clearIsRetweet() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'entities' field.
      * @return The value.
      */
    public rheeluke.streams.avro.Entities getEntities() {
      return entities;
    }

    /**
      * Sets the value of the 'entities' field.
      * @param value The value of 'entities'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder setEntities(rheeluke.streams.avro.Entities value) {
      validate(fields()[5], value);
      this.entitiesBuilder = null;
      this.entities = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'entities' field has been set.
      * @return True if the 'entities' field has been set, false otherwise.
      */
    public boolean hasEntities() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'entities' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public rheeluke.streams.avro.Entities.Builder getEntitiesBuilder() {
      if (entitiesBuilder == null) {
        if (hasEntities()) {
          setEntitiesBuilder(rheeluke.streams.avro.Entities.newBuilder(entities));
        } else {
          setEntitiesBuilder(rheeluke.streams.avro.Entities.newBuilder());
        }
      }
      return entitiesBuilder;
    }

    /**
     * Sets the Builder instance for the 'entities' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public rheeluke.streams.avro.Tweet.Builder setEntitiesBuilder(rheeluke.streams.avro.Entities.Builder value) {
      clearEntities();
      entitiesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'entities' field has an active Builder instance
     * @return True if the 'entities' field has an active Builder instance
     */
    public boolean hasEntitiesBuilder() {
      return entitiesBuilder != null;
    }

    /**
      * Clears the value of the 'entities' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Tweet.Builder clearEntities() {
      entities = null;
      entitiesBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Tweet build() {
      try {
        Tweet record = new Tweet();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.created_at = fieldSetFlags()[1] ? this.created_at : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (userBuilder != null) {
          record.user = this.userBuilder.build();
        } else {
          record.user = fieldSetFlags()[2] ? this.user : (rheeluke.streams.avro.User) defaultValue(fields()[2]);
        }
        record.text = fieldSetFlags()[3] ? this.text : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.is_retweet = fieldSetFlags()[4] ? this.is_retweet : (java.lang.Boolean) defaultValue(fields()[4]);
        if (entitiesBuilder != null) {
          record.entities = this.entitiesBuilder.build();
        } else {
          record.entities = fieldSetFlags()[5] ? this.entities : (rheeluke.streams.avro.Entities) defaultValue(fields()[5]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
