/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package rheeluke.streams.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Entities extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2930295236892894054L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Entities\",\"namespace\":\"rheeluke.streams.avro\",\"fields\":[{\"name\":\"hashtags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Hashtag\",\"fields\":[{\"name\":\"text\",\"type\":\"string\"}],\"connect.name\":\"rheeluke.streams.avro.Hashtag\"}}]},{\"name\":\"media\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Medium\",\"fields\":[{\"name\":\"display_url\",\"type\":\"string\"},{\"name\":\"expanded_url\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"connect.name\":\"rheeluke.streams.avro.Medium\"}}]},{\"name\":\"urls\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Url\",\"fields\":[{\"name\":\"display_url\",\"type\":\"string\"},{\"name\":\"expanded_url\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"connect.name\":\"rheeluke.streams.avro.Url\"}}]},{\"name\":\"user_mentions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UserMention\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"screen_name\",\"type\":\"string\"}],\"connect.name\":\"rheeluke.streams.avro.UserMention\"}}]}],\"connect.name\":\"rheeluke.streams.avro.Entities\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<rheeluke.streams.avro.Hashtag> hashtags;
  @Deprecated public java.util.List<rheeluke.streams.avro.Medium> media;
  @Deprecated public java.util.List<rheeluke.streams.avro.Url> urls;
  @Deprecated public java.util.List<rheeluke.streams.avro.UserMention> user_mentions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Entities() {}

  /**
   * All-args constructor.
   * @param hashtags The new value for hashtags
   * @param media The new value for media
   * @param urls The new value for urls
   * @param user_mentions The new value for user_mentions
   */
  public Entities(java.util.List<rheeluke.streams.avro.Hashtag> hashtags, java.util.List<rheeluke.streams.avro.Medium> media, java.util.List<rheeluke.streams.avro.Url> urls, java.util.List<rheeluke.streams.avro.UserMention> user_mentions) {
    this.hashtags = hashtags;
    this.media = media;
    this.urls = urls;
    this.user_mentions = user_mentions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hashtags;
    case 1: return media;
    case 2: return urls;
    case 3: return user_mentions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hashtags = (java.util.List<rheeluke.streams.avro.Hashtag>)value$; break;
    case 1: media = (java.util.List<rheeluke.streams.avro.Medium>)value$; break;
    case 2: urls = (java.util.List<rheeluke.streams.avro.Url>)value$; break;
    case 3: user_mentions = (java.util.List<rheeluke.streams.avro.UserMention>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hashtags' field.
   * @return The value of the 'hashtags' field.
   */
  public java.util.List<rheeluke.streams.avro.Hashtag> getHashtags() {
    return hashtags;
  }

  /**
   * Sets the value of the 'hashtags' field.
   * @param value the value to set.
   */
  public void setHashtags(java.util.List<rheeluke.streams.avro.Hashtag> value) {
    this.hashtags = value;
  }

  /**
   * Gets the value of the 'media' field.
   * @return The value of the 'media' field.
   */
  public java.util.List<rheeluke.streams.avro.Medium> getMedia() {
    return media;
  }

  /**
   * Sets the value of the 'media' field.
   * @param value the value to set.
   */
  public void setMedia(java.util.List<rheeluke.streams.avro.Medium> value) {
    this.media = value;
  }

  /**
   * Gets the value of the 'urls' field.
   * @return The value of the 'urls' field.
   */
  public java.util.List<rheeluke.streams.avro.Url> getUrls() {
    return urls;
  }

  /**
   * Sets the value of the 'urls' field.
   * @param value the value to set.
   */
  public void setUrls(java.util.List<rheeluke.streams.avro.Url> value) {
    this.urls = value;
  }

  /**
   * Gets the value of the 'user_mentions' field.
   * @return The value of the 'user_mentions' field.
   */
  public java.util.List<rheeluke.streams.avro.UserMention> getUserMentions() {
    return user_mentions;
  }

  /**
   * Sets the value of the 'user_mentions' field.
   * @param value the value to set.
   */
  public void setUserMentions(java.util.List<rheeluke.streams.avro.UserMention> value) {
    this.user_mentions = value;
  }

  /**
   * Creates a new Entities RecordBuilder.
   * @return A new Entities RecordBuilder
   */
  public static rheeluke.streams.avro.Entities.Builder newBuilder() {
    return new rheeluke.streams.avro.Entities.Builder();
  }

  /**
   * Creates a new Entities RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Entities RecordBuilder
   */
  public static rheeluke.streams.avro.Entities.Builder newBuilder(rheeluke.streams.avro.Entities.Builder other) {
    return new rheeluke.streams.avro.Entities.Builder(other);
  }

  /**
   * Creates a new Entities RecordBuilder by copying an existing Entities instance.
   * @param other The existing instance to copy.
   * @return A new Entities RecordBuilder
   */
  public static rheeluke.streams.avro.Entities.Builder newBuilder(rheeluke.streams.avro.Entities other) {
    return new rheeluke.streams.avro.Entities.Builder(other);
  }

  /**
   * RecordBuilder for Entities instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Entities>
    implements org.apache.avro.data.RecordBuilder<Entities> {

    private java.util.List<rheeluke.streams.avro.Hashtag> hashtags;
    private java.util.List<rheeluke.streams.avro.Medium> media;
    private java.util.List<rheeluke.streams.avro.Url> urls;
    private java.util.List<rheeluke.streams.avro.UserMention> user_mentions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(rheeluke.streams.avro.Entities.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hashtags)) {
        this.hashtags = data().deepCopy(fields()[0].schema(), other.hashtags);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.media)) {
        this.media = data().deepCopy(fields()[1].schema(), other.media);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.urls)) {
        this.urls = data().deepCopy(fields()[2].schema(), other.urls);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user_mentions)) {
        this.user_mentions = data().deepCopy(fields()[3].schema(), other.user_mentions);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Entities instance
     * @param other The existing instance to copy.
     */
    private Builder(rheeluke.streams.avro.Entities other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.hashtags)) {
        this.hashtags = data().deepCopy(fields()[0].schema(), other.hashtags);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.media)) {
        this.media = data().deepCopy(fields()[1].schema(), other.media);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.urls)) {
        this.urls = data().deepCopy(fields()[2].schema(), other.urls);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user_mentions)) {
        this.user_mentions = data().deepCopy(fields()[3].schema(), other.user_mentions);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'hashtags' field.
      * @return The value.
      */
    public java.util.List<rheeluke.streams.avro.Hashtag> getHashtags() {
      return hashtags;
    }

    /**
      * Sets the value of the 'hashtags' field.
      * @param value The value of 'hashtags'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Entities.Builder setHashtags(java.util.List<rheeluke.streams.avro.Hashtag> value) {
      validate(fields()[0], value);
      this.hashtags = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hashtags' field has been set.
      * @return True if the 'hashtags' field has been set, false otherwise.
      */
    public boolean hasHashtags() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hashtags' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Entities.Builder clearHashtags() {
      hashtags = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'media' field.
      * @return The value.
      */
    public java.util.List<rheeluke.streams.avro.Medium> getMedia() {
      return media;
    }

    /**
      * Sets the value of the 'media' field.
      * @param value The value of 'media'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Entities.Builder setMedia(java.util.List<rheeluke.streams.avro.Medium> value) {
      validate(fields()[1], value);
      this.media = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'media' field has been set.
      * @return True if the 'media' field has been set, false otherwise.
      */
    public boolean hasMedia() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'media' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Entities.Builder clearMedia() {
      media = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'urls' field.
      * @return The value.
      */
    public java.util.List<rheeluke.streams.avro.Url> getUrls() {
      return urls;
    }

    /**
      * Sets the value of the 'urls' field.
      * @param value The value of 'urls'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Entities.Builder setUrls(java.util.List<rheeluke.streams.avro.Url> value) {
      validate(fields()[2], value);
      this.urls = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'urls' field has been set.
      * @return True if the 'urls' field has been set, false otherwise.
      */
    public boolean hasUrls() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'urls' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Entities.Builder clearUrls() {
      urls = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_mentions' field.
      * @return The value.
      */
    public java.util.List<rheeluke.streams.avro.UserMention> getUserMentions() {
      return user_mentions;
    }

    /**
      * Sets the value of the 'user_mentions' field.
      * @param value The value of 'user_mentions'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Entities.Builder setUserMentions(java.util.List<rheeluke.streams.avro.UserMention> value) {
      validate(fields()[3], value);
      this.user_mentions = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'user_mentions' field has been set.
      * @return True if the 'user_mentions' field has been set, false otherwise.
      */
    public boolean hasUserMentions() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'user_mentions' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Entities.Builder clearUserMentions() {
      user_mentions = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Entities build() {
      try {
        Entities record = new Entities();
        record.hashtags = fieldSetFlags()[0] ? this.hashtags : (java.util.List<rheeluke.streams.avro.Hashtag>) defaultValue(fields()[0]);
        record.media = fieldSetFlags()[1] ? this.media : (java.util.List<rheeluke.streams.avro.Medium>) defaultValue(fields()[1]);
        record.urls = fieldSetFlags()[2] ? this.urls : (java.util.List<rheeluke.streams.avro.Url>) defaultValue(fields()[2]);
        record.user_mentions = fieldSetFlags()[3] ? this.user_mentions : (java.util.List<rheeluke.streams.avro.UserMention>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
