/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package rheeluke.streams.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Url extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7129866691450813838L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Url\",\"namespace\":\"rheeluke.streams.avro\",\"fields\":[{\"name\":\"display_url\",\"type\":\"string\"},{\"name\":\"expanded_url\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"connect.name\":\"rheeluke.streams.avro.Url\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence display_url;
  @Deprecated public java.lang.CharSequence expanded_url;
  @Deprecated public java.lang.CharSequence url;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Url() {}

  /**
   * All-args constructor.
   * @param display_url The new value for display_url
   * @param expanded_url The new value for expanded_url
   * @param url The new value for url
   */
  public Url(java.lang.CharSequence display_url, java.lang.CharSequence expanded_url, java.lang.CharSequence url) {
    this.display_url = display_url;
    this.expanded_url = expanded_url;
    this.url = url;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return display_url;
    case 1: return expanded_url;
    case 2: return url;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: display_url = (java.lang.CharSequence)value$; break;
    case 1: expanded_url = (java.lang.CharSequence)value$; break;
    case 2: url = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'display_url' field.
   * @return The value of the 'display_url' field.
   */
  public java.lang.CharSequence getDisplayUrl() {
    return display_url;
  }

  /**
   * Sets the value of the 'display_url' field.
   * @param value the value to set.
   */
  public void setDisplayUrl(java.lang.CharSequence value) {
    this.display_url = value;
  }

  /**
   * Gets the value of the 'expanded_url' field.
   * @return The value of the 'expanded_url' field.
   */
  public java.lang.CharSequence getExpandedUrl() {
    return expanded_url;
  }

  /**
   * Sets the value of the 'expanded_url' field.
   * @param value the value to set.
   */
  public void setExpandedUrl(java.lang.CharSequence value) {
    this.expanded_url = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Creates a new Url RecordBuilder.
   * @return A new Url RecordBuilder
   */
  public static rheeluke.streams.avro.Url.Builder newBuilder() {
    return new rheeluke.streams.avro.Url.Builder();
  }

  /**
   * Creates a new Url RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Url RecordBuilder
   */
  public static rheeluke.streams.avro.Url.Builder newBuilder(rheeluke.streams.avro.Url.Builder other) {
    return new rheeluke.streams.avro.Url.Builder(other);
  }

  /**
   * Creates a new Url RecordBuilder by copying an existing Url instance.
   * @param other The existing instance to copy.
   * @return A new Url RecordBuilder
   */
  public static rheeluke.streams.avro.Url.Builder newBuilder(rheeluke.streams.avro.Url other) {
    return new rheeluke.streams.avro.Url.Builder(other);
  }

  /**
   * RecordBuilder for Url instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Url>
    implements org.apache.avro.data.RecordBuilder<Url> {

    private java.lang.CharSequence display_url;
    private java.lang.CharSequence expanded_url;
    private java.lang.CharSequence url;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(rheeluke.streams.avro.Url.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.display_url)) {
        this.display_url = data().deepCopy(fields()[0].schema(), other.display_url);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.expanded_url)) {
        this.expanded_url = data().deepCopy(fields()[1].schema(), other.expanded_url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.url)) {
        this.url = data().deepCopy(fields()[2].schema(), other.url);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Url instance
     * @param other The existing instance to copy.
     */
    private Builder(rheeluke.streams.avro.Url other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.display_url)) {
        this.display_url = data().deepCopy(fields()[0].schema(), other.display_url);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.expanded_url)) {
        this.expanded_url = data().deepCopy(fields()[1].schema(), other.expanded_url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.url)) {
        this.url = data().deepCopy(fields()[2].schema(), other.url);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'display_url' field.
      * @return The value.
      */
    public java.lang.CharSequence getDisplayUrl() {
      return display_url;
    }

    /**
      * Sets the value of the 'display_url' field.
      * @param value The value of 'display_url'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Url.Builder setDisplayUrl(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.display_url = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'display_url' field has been set.
      * @return True if the 'display_url' field has been set, false otherwise.
      */
    public boolean hasDisplayUrl() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'display_url' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Url.Builder clearDisplayUrl() {
      display_url = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'expanded_url' field.
      * @return The value.
      */
    public java.lang.CharSequence getExpandedUrl() {
      return expanded_url;
    }

    /**
      * Sets the value of the 'expanded_url' field.
      * @param value The value of 'expanded_url'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Url.Builder setExpandedUrl(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.expanded_url = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'expanded_url' field has been set.
      * @return True if the 'expanded_url' field has been set, false otherwise.
      */
    public boolean hasExpandedUrl() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'expanded_url' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Url.Builder clearExpandedUrl() {
      expanded_url = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }

    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public rheeluke.streams.avro.Url.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.url = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public rheeluke.streams.avro.Url.Builder clearUrl() {
      url = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Url build() {
      try {
        Url record = new Url();
        record.display_url = fieldSetFlags()[0] ? this.display_url : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.expanded_url = fieldSetFlags()[1] ? this.expanded_url : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.url = fieldSetFlags()[2] ? this.url : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
